package frontend

import scala.scalajs.js
//import scala.scalajs.js.annotation.*
import scala.scalajs.js.annotation.JSImport
import com.raquo.laminar.api.L.{*, given}

//import upickle.default.{ReadWriter, Reader, Writer, macroW, macroR}
import upickle.default._
import upickle.default.{ReadWriter => RW, macroRW}
import scala.scalajs.js.JSON

import org.scalajs.dom.Fetch.fetch
import org.scalajs.dom._
import org.scalajs.dom
import scala.scalajs.js.Thenable.Implicits.*
import scala.concurrent.ExecutionContext.Implicits.global

import scala.concurrent.Future
import scala.scalajs.js.Promise
import org.scalajs.dom.HttpMethod

import scala.concurrent.duration._
//val delay: FiniteDuration = 3.seconds


object HttpClient:

  def fetchProductFuture(category: String, sku: String): Unit = {
    val url: RequestInfo = s"http://localhost:8080/$category/$sku"
      val responseFuture = dom.fetch(url).toFuture

      responseFuture.flatMap {response =>
        if (!response.ok) throw new Exception(s"HTTP Error: ${response.status}")
        //println("Response Ok. Parsing...")
        response.text().toFuture
      }.map { json =>
        println(json)
        val product = upickle.default.read[Product](json)  //jSON in case class
        //println("okey. Product ready: " + product)
        productVar.set(Some(product))   // update Var
      }.recover {
        case error: Throwable => println(s"Error downloading Product: ${error.getMessage}")
        productVar.set(None)
      }
  }

  def fetchProductWithRetry(category: String, sku: String): Unit = {
    val maxRetries: Int = 5
    val url: RequestInfo = s"http://localhost:8080/$category/$sku"
    val delay: FiniteDuration = 500.millis //3.seconds

    def sleepReject(delay: FiniteDuration): Promise[Unit] = Promise.apply((resolve, reject) =>
      dom.window.setTimeout(() => reject(new Exception(s"Timeout exception after delay ${delay.toMillis} ms")), delay.toMillis.toDouble)
    )

   // val responseFuture = dom.fetch(url).toFuture


    def fetchWithRetry(retriesLeft: Int): Future[Unit] = {
      val responseFuture = dom.fetch(url).toFuture
      val racePromise = Promise.race(js.Array(dom.fetch(url), sleepReject(delay))).toFuture

      racePromise.flatMap {response =>
        if (!response.ok) throw new Exception(s"HTTP Error: ${response.status}")
        //println("Response Ok. Parsing...")
        response.text().toFuture
      }.map { json =>
        println(json)
        val product = upickle.default.read[Product](json)  //jSON in case class
        //println("okey. Product ready: " + product)
        productVar.set(Some(product))   // update Var
      }.recoverWith {
        case error: Throwable => println(s"Error downloading Product: ${error.getMessage}. Retries left: $retriesLeft")
        if (retriesLeft > 0) fetchWithRetry(retriesLeft - 1)
        else {
          productVar.set(None)
          println("Data is unavailable. Please check your connection ")
          dom.window.alert("Data is unavailable. Please check your connection")
          Future.failed(error)
        }
      }
    }

    fetchWithRetry(maxRetries)
  }
end HttpClient
